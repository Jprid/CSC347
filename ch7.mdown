# Scope, functions, and storage mgmt
---
### Classes of variables:
#### *Local Variables*:
Stored on the stack in the activation record associated with the block

#### Parameters (of function or procedure blocks)

Stored in activation record associated with the block

#### Global Variables:

* declared in enclosing block-->therefore must be accessed from activation
* record placed on the run-time stack before the current activation record.
---
### Simplified Machine Model:

#### figure 7.1 uses Simplified Machine Model (SMM)
	[-] separates code from data memory
	[-] when program enters new black, an AR (Activation Record)
        with space for the local variables declared in the block is
        added to the Run time stack and the environment pointer is set
        to point to the new activation record
	[-] when program exits block, the activation record is removed from the stack
      and the envptr is reset to its prev. spot
	[-] higher-order fxn can cause stack-discipline (stack ordering prop.) to fail

---
__Reference Implementation:__

* implementation of lang. intended to define
the behavior of the lang

### IN-Line Blocks

* In-line block  : block that is not body of fxn or procedure. Are Simple

### Activation Records and Local Variables

    [-] when pgrm enters in-line block --> allocates space for variables in
        block
    [-] done by allocating set of mem. locations

* example: (see code block below)
![stack growing info](/stackgrowinginfo.PNG)

#### Code:
      {            // 1. program enters outer, initial enclosing block:
        int x=0;   // AR with space for (block's vars) x pushed onto stack
        int y=x+1; // y pushed onto stack in same AR
        {          // 2. program enters inner block:
          int z=(x+y)*(x-y);
          // once  value of z is set, it's AR is popped off the stack
          // new activation record w/ space for z created, pushed onto stack
          // AR with x & y popped off stack
          };
      };
---
      {
        int z = (x + y) * (x - y);
      }

---

#### Scope & Lifetime:

#### Global Variables and Control Links

__Control Link (CL):__ pushing and popping AR store ptr to prev. AR. Used when
 control is returned to the prev. block's instructions.

AKA __Dynamic Link:__ because it describes the dynamic sequence of fxn calls
made by the program

![Control Link](/controllink.PNG)
##### Control link update
__*AR pushed to stack*__
__[-]__ CL set to envptr's prev; envptr set to current AR
__*AR popped from stack*__
[-] envptr reset by following control link from AR (being popped off)
##### Example run-time stack:
> __CODE:__
>
		{
			int x = 0;
			int y = x + 1;
				{
					int z = (x + y) * (x-y);
				};
		};
		// see image below for visual representation.
> __IMAGE:__
![Ex. RTS](/RTS.PNG)

##### DESC. (refer to above image)
1. program evaluates x+y, and x-y:
	* __loading x:__ code follows envptr to head of current AR, where ctrl_link is
	* __Location of x__ = ctrl_link + 1 // ctrl_link stores location of prevblock
	* __Loading y:__ code follows envptr to head of current AR, where ctrl_link is
	* __Location of y__ = ctrl_link + 2

#### SUM:
> the compiler can determine the number of control links to follow and the relative location of the variable within the correct block from the source code. In particular, it isn't necessary to store variable names in activation records.

### Fxns and Procedures:

![Fxn Activation Record](/FxnAr.PNG)
