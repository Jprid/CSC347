# Concepts of Programming Languages Final Review


#### Topics on Final Exam:

##### [5 Q] Closures (nested fxns and objects) + Scala/Java conversion to classes:

##### [3 Q] Dynamic Dispatch

##### [2 Q] Scala functions and map

##### [4 Q] Parameter passing (L/R values + CBV + CBR):

##### [6 Q] Scope

##### [2 Q] Use of Call Stack for storing args

##### [3 Q] Subtyping (including lists and arrays)

---

#### L-Values:

    // (C) LVALUES:
    int x = 5;
    int y = 6;
    int *p = &x;
    int *q = &y;
    int **r = &p;
    r = &q;
    q = p;
    **r = 7;

    // requires r-mode evaluation, but still L valueS
    arr[n + 2] = 7;

    ```Java
    // (Java/Scala) Also L-values
    obj.f1 = 7
    obj.m1 ().f1[n + 2].m2 ().f2 = 7
    ```

* #### Is x++ an l-value in C? The context is:

  ```C
  void f (int x) {
    ...
  }
  ```

  * #### No, (see below)

  ```C
  void f (int x) {
    x ++ = 2;
  }
  int main{
    f(3);
  }
  /*test.c: In function ‘f’:*/
  /*test.c:22:8: error: lvalue required as left operand of assignment*/
  /*x ++ = 2;*/
  ```

---

* #### Q: Is arr[x++] an l-value in C? The context is:

  ```C
  void f (int x) {
    int arr[] = { 5, 6, 7, 8, 9, 10, 11 };
    ...
  }
  ```

* #### A: yes (See below)

  ```C
  void f (int x) {
    int arr[] = {0,0,3,4};
    int z = arr[x++];
    printf("%d \n", z);
  //   s.p = &(s.y);
  }
  int main () {
      f(1);
  }
  ```

---

* #### Q: Is f ().x an l-value in C? The context is:

  ```C
  struct S {
    int x;
    int y;
  };

  struct S f () {
    struct S s;
    s.x = 5;
    s.y = 6;
    return s;  // returns a copy of the "struct S", i.e., copies the two int members back
  }

  void g () {
    ...
  }
  ```

* #### A: No (see below)

  ```C
  struct S {
      int x;
      int y;
    };
    struct S f () {
      struct S s;
      s.x = 5;
      s.y = 6;
      return s;  // returns a copy of the "struct S", i.e., copies the two int members back
    }
    void g () {
      f().x = 3;
    }
  int main () {
      g();
      /*test.c: In function ‘g’:
      test.c:16:11: error: lvalue required as left operand of assignment
      f().x = 3;*/
  }
  ```
---

* #### Q: Is t.x an l-value in C? The context is:

  ```C
  struct S {
    int x;
    int y;
  };

  struct S f () {
    struct S s;
    s.x = 5;
    s.y = 6;
    return s;  // returns a copy of the "struct S", i.e., copies the two int members back
  }

  void g () {
    struct S t = f ();
    ...
  }
  ```

#### A: Yes (see below)

  ```C
  struct S {
      int x;
      int y;
    };

    struct S f () {
      struct S s;
      s.x = 5;
      s.y = 6;
      return s;  // returns a copy of the "struct S", i.e., copies the two int members back
    }

    void g () {
      struct S t = f ();
      t.x = 3;
      printf("%d \n", t.x);
    }
  int main () {
      g();
      // runs without error
      // prints out "3"
  }
  ```

  ---


 #### Q: Is f ()->x an l-value in C? Recall that this means (*(f())).x, i.e., call f, dereference the pointer, then access the x member of the struct. The context is:

  ```C
  #include <stdlib.h>
  struct S {
    int x;
    int y;
  };
  struct S *f () {
    struct S *p = (struct S *) malloc (sizeof (struct S));
    p->x = 5;   // recall that p->x is just shorthand for (*p).x
    p->y = 6;
    return p;  // returns a copy of the pointer, i.e., copies just a pointer back
  }
  void g () {
    ...
  }
  ```

#### A: Yes, see below

```C
#include <stdlib.h>
struct S {
    int x;
    int y;
  };
  struct S *f () {
    struct S *p = (struct S *) malloc (sizeof (struct S));
    p->x = 5;   // recall that p->x is just shorthand for (*p).x
    p->y = 6;
    return p;  // returns a copy of the pointer, i.e., copies just a pointer back
  }
  void g () {
    f()->x = 7; /* // is able to assign to f()->x (however, this assignment has no effect)*/
    printf("%d \n", f()->x);
  }
int main () {
    g();
}
```

---

#### Q: Is list.get (x++) an l-value in Java? The context is:

  ```Java
  import java.util.ArrayList;
  class LValue7 {
    static void f (int x) {
      ArrayList<Integer> list = new ArrayList<> ();
      list.add (5);
      list.add (6);
      list.add (7);
      list.add (8);
      ...
    }
  }
  ```

#### A: No, see below

```Java
import java.util.ArrayList;
class LValue7 {
  static void f (int x) {
    ArrayList<Integer> list = new ArrayList<> ();
    list.add (5);
    list.add (6);
    list.add (7);
    list.add (8);
    list.get(x++) = 0;
  }
  public static void main(String[] args){
  	f(0);
    /*ERROR
    LValue7.java:10: error: unexpected type
    list.get(x++) = 0;
            ^
    required: variable
    found:    value
    1 error*/
  }
}
```

---

#### Q: Is list.get (x++).x an l-value in Java? The context is:

  ```Java
  import java.util.ArrayList;
  class C {
    int x;
    int y;
    C (int x, int y) {
      this.x = x;
      this.y = y;
    }
  }
  class LValue8 {
    static void f (int x) {
      ArrayList<C> list = new ArrayList<> ();
      list.add (new C (5, 5));
      list.add (new C (6, 6));
      list.add (new C (7, 7));
      list.add (new C (8, 8));
      ... // put code here
    }
  }
  ```

 #### A: No, see below:

  ```Java
  import java.util.ArrayList;
  class C {
    int x;
    int y;
    C (int x, int y) {
      this.x = x;
      this.y = y;
    }
  }
  class LValue8 {
    static void f (int x) {
      ArrayList<C> list = new ArrayList<> ();
      list.add (new C (5, 5));
      list.add (new C (6, 6));
      list.add (new C (7, 7));
      list.add (new C (8, 8));
      list.get(x++).x = 0;
      for(int i = 0; i < list.size() ; i++){
        C tmp = list.get(i);
        System.out.printf("%d => %d \n", i, tmp.x);
      }
    }
    public static void main(String[] args){
      f(0); //
    }
  }
  ```

---

---

### Argument Passing

#### CBV in C - Int: confirm that C uses call-by-value to pass int variables by writing a simple C program then running it.

#### A:

  ```C
  void f(int x){
    x++;
    printf("f().x == %d \n", x);
  }
  int main() {
    int x = 0;
    f(x);
    printf("%d \n", x);
  }
  /*Output:*/
  /*f().x == 1 */
  /*0 */
  ```

---

#### CBV in C - Pointer: Confirm that C uses call-by-value to pass pointer variables by writing a simple C program then running it.

#### A:

  ```C
  void f(int* x){
    int z = 1;
    x = &z;
    printf("f().x ==> %d \n", x);
  }
  int main() {
    int y = 0;
    int* x = &y;
    f(x);
    printf("%p \n", x);
  }
  ```

---

#### CBV in Java - Int: Confirm that Java uses call-by-value to pass int variables by writing a simple Java program then running it.

#### A:

  ```Java
  public class JCBV{
    static void f(int x){
      x = x + 1;
      System.out.printf("f().x => %d \n", x);
    }
    public static void main(String[] args){
      int x =  5;
      System.out.printf("x => %d \n", x);
      f(x);
      System.out.printf("x => %d \n", x);
      /* OUTPUT:
       * x => 5
       * f().x => 6
       * x => 5
       */
    }
  }
  ```

---

#### CBV in Java - Reference: Confirm that Java uses call-by-value to pass reference variables (meaning references to instances on the heap) by writing a simple Java program then running it.

#### A:

```Java
class ref{
	int n;
	public ref(int x){ this.n = x; }
}
public class refPass{
	static void f(ref r){
		r.n = 7;
		System.out.printf("r.x => %d \n", r.n);
	}
	public static void main(String[] args){
		ref x = new ref(4);
		System.out.printf("x => %d \n", x.n);
		f(x);
		System.out.printf("x.x => %d \n", x.n);
    /* OUTPUT:
    x => 4
    r.x => 7
    x.x => 7*
    /
	}
}
```

---

#### Java Immutable Pair Class - Q:

 #### The following Java program defines an immutable Pair class (with type parameters X and Y). Complete the definition of fibaux in the following Java program, which uses the immutable Pair class. You may need to refer to the Java documentation for use of Java's BigInteger class.

  ```Java
  import java.math.BigInteger;

  class Pair<X,Y> {
    final X x;
    final Y y;
    Pair (X x, Y y) {
      this.x = x;
      this.y = y;
    }
  }
  public class Fib1 {
    static Pair<BigInteger,BigInteger> fibaux (BigInteger n) {
      ...
    }
    static BigInteger fib (BigInteger n) {
      return fibaux (n).x;
    }
    public static void main (String[] args) {
      for (int i = 0; i < 71; i++) {
        System.out.println (fib (BigInteger.valueOf (i)));
      }
    }
  }
  ```

#### Java Immutable Pair Class - A:

  ```Java
  static Pair<BigInteger,BigInteger> fibaux (BigInteger n) {
      if ((n.compareTo(BigInteger.valueOf(0)) <= 0) || (n.compareTo(BigInteger.valueOf(0)) == 0))
        return new Pair<>(BigInteger.ZERO, BigInteger.ONE);
      else if (n.compareTo(BigInteger.ONE) == 0)
        return new Pair<> (BigInteger.ONE, BigInteger.ONE);
      else {
        Pair <BigInteger, BigInteger> tmp = fibaux(n.subtract(BigInteger.ONE));
        return new Pair(tmp.y, tmp.x.add(tmp.y));
      }
  }
  ```

---

### Closures

#### runtime support for nested functions (when lifetimes don't nest)

#### __only in static/lexically scoped PLs__

#### EXAMPLE: NESTED FUNCTIONS

```Scala
def printElt [A,B] (f:A=>B) (x:A) : B = {
  println (x)
  f (x)
}

def mapDebug [A,B] (xs:List[A], f:A=>B) : List[B] = {
  xs.map (printElt (f))
}
def mapDebug [A,B] (xs:List[A], f:A=>B) : List[B] = {
  def printElt (x:A) : B = {
    println (x)
    f (x)  // use f from enclosing context
  }
  xs.map (printElt)
}
// ALTERNATIVELY:
def mapDebug [A,B] (xs:List[A], f:A=>B) : List[B] = {
  xs.map ((x:A) => { println (x); f (x) })  // make function anonymous
}
```


---

### Scope

 Write a Scala expression alternates of type Stream[Boolean] that alternates between true and false (starting with true). Try the following expressions in the Scala REPL (after your definition of alternates).

#### Scope-Occurences:

  (w/r/t) identifiers in PLs

  __*free*__ occurrence    => no matching binding

  ```y = 5*x // x & y are free occurences (no type decl)```

  __*binding*__ occurrence => declares identifier's type

  ```int y; // y declared as int therefore binding```

  __*bound*__ occurrence => follows matching binding occurrence

  ```C
  int y;    // Binding occurrence of y
  int x;    // Binding occurrence of x

  x=6;      // Bound occurrence of x
  y = 5*x;  // Bound occurrences of x and y
  ```

---

  ```Scala
  "the rain in spain".tolist
  "the rain in spain".toList.zip (alternates)
  // res3: List[(Char, Boolean)] = List((t,true), (h,false))

  "the rain in Spain".toList.zip (alternates).filter ((p:(Char,Boolean)) => p match { case (c:Char,b:Boolean) => b })
  // res4: List[(Char, Boolean)] = List((t,true))

  /* shorthand for the previous version */
  "the rain in Spain".toList.zip (alternates).filter { case (c:Char,b:Boolean) => b }
  // res4: List[(Char, Boolean)] = List((t,true))

  "the rain in Spain".toList.zip (alternates).filter { case (c:Char,b:Boolean) => b }
  // res4: List[(Char, Boolean)] = List((t,true))

  val evens = "the rain in Spain".toList.zip (alternates).filter { case (c:Char,b:Boolean) => b }.map (p => p._1)
  // evens: List[Char] = List(t)

  val odds = "the rain in Spain".toList.zip (alternates).filter { case (c:Char,b:Boolean) => !b }.map (p => p._1)
  // odds: List[Char] = List(h)

  evens.zip (odds)
  ```

#### A:

  ```Scala
  // Alternates definition:
  val alternates: Stream[Boolean] = true #:: false #:: alternates

  // with console OUTPUT
  scala> val alternates : Stream[Boolean] = true #:: false #:: alternates
  alternates: Stream[Boolean] = Stream(true, ?)

  scala> "the rain in spain".toList
  res4: List[Char] = List(t, h, e,  , r, a, i, n,  , i, n,  , s, p, a, i, n)

  scala> "the rain in spain".toList.zip (alternates)
  res5: List[(Char, Boolean)] = List((t,true), (h,false), (e,true), ( ,false), (r,true), (a,false), (i,true), (n,false), ( ,true), (i,false), (n,true), ( ,false), (s,true), (p,false), (a,true), (i,false), (n,true))

  scala> "the rain in Spain".toList.zip(alternates).filter((p:(Char, Boolean)) => p match { case (c:Char, b:Boolean) => b})

  res6: List[(Char, Boolean)] =
  List((t,true), (e,true), (r,true), (i,true), ( ,true), (n,true), (S,true), (a,true), (n,true))

  scala> "the rain in Spain".toList.zip (alternates).filter{ case (c:Char, b:Boolean) => b }
  res8: List[(Char, Boolean)] = List((t,true), (e,true), (r,true), (i,true), ( ,true), (n,true), (S,true), (a,true), (n,true))

  scala> val evens = "the rain in Spain".toList.zip(alternates).filter { case (c:Char, b:Boolean) => b }.map (p => p._1)
  evens: List[Char] = List(t, e, r, i,  , n, S, a, n)

  scala> val odds = "the rain in Spain".toList.zip(alternates).filter {case (c:Char, b:Boolean) => !b }.map(p => p._1)
  odds: List[Char] = List(h,  , a, n, i,  , p, i)

  scala> evens.zip(odds)
  res9: List[(Char, Char)] = List((t,h), (e, ), (r,a), (i,n), ( ,i), (n, ), (S,p), (a,i))

  ```

---

### Static and Dynamic Scope

#### Scope-Static Scope (Lexical Scope):

Identifiers (var names) bound to closest binding occurrence (var with type decl) __in an enclosing block of program code__

#### Scope-Dyamic Scope:

Identifiers (var names) bound to the binding occurrence in the closest AR

Code that is not local to current block are not resolved (bound) until runtime



---

Design your own example to show the difference between static and dynamic scope. Try running it in Scala, Scheme, C, Java. Optionally, install the Perl interpreter and demonstrate that Perl uses dynamic scope for your example when you declare local variables using the local keyword.

---

#### __TOUGH__ Example 1: Consider the following Java program. Work out what will be printed when it runs. Verify your answer by compiling and running the program.

  ```Java
  abstract class A {
    int f (int x) {
      System.out.format ("A.f (%d)%n", x);
      return (x == 0) ? g () : f (x - 1);
    }
    abstract int g ();
    void h () {
      System.out.println ("A.h ()");
    }
  }
  class B extends A {
    int g () {
      System.out.println ("B.g ()");
      A r = this;
      r.h ();
      return 0;
    }
    void h () {
      System.out.println ("B.h ()");
      super.h ();
    }
  }
  public class Inheritance07 {
    public static void main (String[] args) {
      A x = new B ();
      x.f (3);
    }
  }
  ```

#### A:

```
    A.f (3)
    A.f (2)
    A.f (1)
    A.f (0)
    B.g ()
    B.h ()
    A.h ()
```

#### __TOUGH__ Example 2: Consider the following Java program. Work out what will be printed when it runs. Verify your answer by compiling and running the program.

```Java
class A {
  int f (int x) {
    System.out.format ("A.f (%d)%n", x);
    return (x == 0) ? g () : f (x - 1);
  }

  int g () {
    System.out.println ("A.g ()");
    return 0;
  }

  void h () {
    System.out.println ("A.h ()");
  }
}
class B extends A {
  int f (int x) {
    System.out.format ("B.f (%d)%n", x);
    return super.f (x);
  }
  int g () {
    System.out.println ("B.g ()");
    A r = this;
    r.h ();
    return 0;
  }
  void h () {
    System.out.println ("B.h ()");
    super.h ();
  }
}
public class Inheritance08 {
  public static void main (String[] args) {
    A x = new B ();
    x.f (3);
  }
}
```

#### A:

    ```
    B.f(3)
    A.f(3)
    B.f(2)
    A.f(2)
    B.f(1)
    A.f(1)
    B.f(0)
    A.f(0)
    B.g()
    B.h()
    ```


#### Example 3: Consider the following Java program. Work out what will be printed when it runs. compile and run it (yes, it is meant to do that).

  ```Java
  class A {
    int f (int x) {
      System.out.format ("A.f (%d)%n", x);
      return (x == 0) ? g () : f (x - 1);
    }

    int g () {
      System.out.println ("A.g ()");
      return 0;
    }

    void h () {
      System.out.println ("A.h ()");
    }
  }
  class B extends A {
    int f (int x) {
      System.out.format ("B.f (%d)%n", x);
      return this.f (x);
    }

    int g () {
      System.out.println ("B.g ()");
      A r = this;
      r.h ();
      return 0;
    }

    void h () {
      System.out.println ("B.h ()");
      super.h ();
    }
  }

  public class Inheritance09 {
    public static void main (String[] args) {
      A x = new B ();
      x.f (3);
    }
  }
  ```

#### A: B.f(3) repeats infinitely

## Composition And Delegation

The Java programs in this section use composition and delegation.

#### Example 1: Consider the following Java program. Work out what will be printed when it runs.

  ```Java
  class A {
    int f (int x) {
      System.out.format ("A.f (%d)%n", x);
      if (x == 0) {
        return g ();
      } else {
        return f (x - 1);
      }
    }

    int g () {
      System.out.println ("A.g ()");
      return 0;
    }
  }

  class B {
    A a = new A ();

    int f (int x) {
      System.out.format ("B.f (%d)%n", x);
      return a.f (x);
    }

    int g () {
      System.out.println ("B.g ()");
      return 0;
    }
  }
  public class Inheritance05 {
    public static void main (String[] args) {
      new B ().f (3);
    }
  }
  ```

#### A:

    ```
    B.f (3)
    A.f (3)
    A.f (2)
    A.f (1)
    A.f (0)
    A.g ()
    ```

#### Example 2: Consider the following Java program. Work out what will be printed when it runs.

```Java
interface I {
  int f (int x);
  int g ();
}

class A implements I {
  I back = this;

  public int f (int x) {
    System.out.format ("A.f (%d)%n", x);
    if (x == 0) {
      return back.g ();
    } else {
      return back.f (x - 1);
    }
  }
  public int g () {
    System.out.println ("A.g ()");
    return 0;
  }
}
class B implements I {
  A a;
  B () {
    a = new A ();
    a.back = this;
  }
  public int f (int x) {
    System.out.format ("B.f (%d)%n", x);
    return a.f (x);
  }
  public int g () {
    System.out.println ("B.g ()");
    return 0;
  }
}
public class Inheritance06 {
  public static void main (String[] args) {
    new B ().f (3);
  }
}
```

#### A:

    ```
    B.f (3)
    A.f (3)
    B.f (2)
    A.f (2)
    B.f (1)
    A.f (1)
    B.f (0)
    A.f (0)
    B.g ()
    ```

### (Java) Dynamic Dispatch & Covariant Subtyping:

#### Q: what is printed when this (java) program runs?

  ```Java
  interface I {
    void f ();
  }
  class A implements I {
    public void f () {
      System.out.println ("A");
    }
  }
  class B extends A {
    public void f () {
      System.out.println ("B");
    }
  }
  public class Dispatch1 {
    public static void main (String[] args) {
      I[] arr1 = new I[] { new A (), new B () };
      A[] arr2 = new A[] { new A (), new B () };
      A[] arr3 = new B[] { new B (), new B () };
      for (int n = 0; n < arr1.length; n++) {
        arr1[n].f ();
        arr1[n] = new A ();
      }
      for(int n = 0; n < arr2.length; n++) {
        arr2[n].f ();
        arr2[n] = new A ();
      }
      for(int n = 0; n < arr3.length; n++) {
        arr3[n].f ();
        arr3[n] = new A ();
      }
    }
  }
  ```

#### A:

  ```Java
    A
    B
    A
    B
    B
    Exception in thread "main" java.lang.ArrayStoreException: A
      at Dispatch1.main(Dispatch1.java:35)
    /*
     * (which is) arr3[n] = new A ();
     * arr3's dynamic type is B[] but it's static type is A[]
     * therefore arr3 can take in an A value (caused by new A())
     * however, because arr3 is dynamically an array of Bs, it cannot take in an A value and so throws an ArrayStoreException
     */
  ```

## Subtyping:

#### 3.1
Q: Is it true that subtyping is a symmetric relation?

 ##### I.e., if Y<:X then X<:Y. (if Y is a subclass of X is X a subclass of Y?

 ##### If you answer no, give an example Java or Scala program that proves your point (it should fail to compile).

#### A:

  ```Java
  class C {
		void f () {System.out.println("C.f()");}
	}
  class D extends C{
		void f () {System.out.println("D.f()");}
	}

  public class Symmetric2{
	 public static void main (String[] args){
        C x = new D();
	    D y = new C();     /* fails to compile because subtyping is not a symmetric relation */
	 }
  }
  ```

---

#### 3.2 Transitivity Q: Suppose W<:X, X<:Y, and List[Y]<:Z. Is it the case that List[W]<:Z?

#### 3.2 A: Yes (not really sure)

#### 3.3 Downcasting

 #### Q: Something is wrong with the method convert in the following Java program. Does it fail at compile time or at runtime? Verify your answer by compiling and (perhaps) running the program.
  ```Java
  public class Downcast {
    static class A           { int x; }
    static class B extends A { int y; }

    static B convert (A p)   { B result = (B) p; return result; }

    public static void main (String[] args){
      A r = new A();
      r.x = 5;
      B s = convert (r);
      System.out.println(s);
    }
  }
  ```
#### 3.3 A: runtime error --> A != B, therefore the attempted cast of p to B results in a type mismatch error.

## Subtyping and variance in Scala

#### 4.1 Covariant Lists Q: verify that the *List* type is covariant in Scala by entering the following Scala program into the Scala REPL

  ```Scala
  class B { def f (x:Int) : Int             = 1
  }

  class C extends B {
    override def f (x:Int) : Int    = 2
    def g (arr:Array[String]) :Int  = 3
  }

  val xs1:List[B] = List (new B, new B)
  val xs2:List[C] = List (new C, new C)
  val xs3:List[B] = List (new B, new C)
  val xs4:List[B] = xs2
  xs4(1).f(0)
  ```

#### A:

 Note: xs2 is a List of type C
 Note: xs4 is a List of type B
 because Lists are covariant in Scala, xs4 can take in C values

#### 4.2 Invariant Arrays Q: Verify that the Array type is invariant in Scala by entering the following Scala program into the Scala REPL.

  ```Scala
  class B {
    def f (x:Int) : Int             = 1
  }

  class C extends B {
    override def f (x:Int) : Int    = 2
    def g (arr:Array[String]) : Int = 3
  }

  val xs1:Array[B] = Array (new B, new B)
  val xs2:Array[C] = Array (new C, new C)
  val xs3:Array[B] = Array (new B, new C)
  val xs4:Array[B] = xs2
  xs4 (0) = new B
  xs2 (0).g ()
  ```

#### A: val xs4:Array[B] = xs2 is illegal because B is not a subtype of C and arrays in Scala are invariant

### Nested Classes:

rewrite Java program to use anonymous inner classes:

```Java
// QUESTION:
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;


class PrintMessage implements Runnable {
  final String message;

  PrintMessage (String message) {
    this.message = message;
  }

  public void run () {
    System.out.println (message);
  }
}

class Sender implements Runnable {
  private final String[] messages;
  private final BlockingQueue<Runnable> q;

  Sender (String[] messages, BlockingQueue<Runnable> q) {
    this.messages = messages;
    this.q = q;
  }

  public void run () {
    try {
      System.out.println ("Sender started");
      for (int i = 0; i < messages.length; i++) {
        Thread.sleep (1000);
        q.put (new PrintMessage (messages[i]));
      }
    } catch (InterruptedException e) {
      // ignore interruptions
    }
  }
}

public class Threads1 {
  public static void main (String[] args) {
    try {
      String[] messages = new String[] { "the", "rain", "in", "Spain", "falls", "mainly", "on", "the", "plain" };
      BlockingQueue<Runnable> q = new LinkedBlockingQueue<> ();
      Sender sender = new Sender (messages, q);
      new Thread (sender).start ();
      while (true) {
        q.take ().run ();
      }
    } catch (InterruptedException e) {
      // ignore interruptions
    }
  }
}
```

#### Threads A:

```Java
// ANSWER:
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class Threads2 {
  public static void main (String[] args) {
  	try{
	  	String[] messages = new String[] { "the", "rain", "in", "Spain", "falls", "mainly", "on", "the", "plain" };
	    BlockingQueue<Runnable> q = new LinkedBlockingQueue<> ();
	  	Runnable Sender = new Runnable() {
	  		public void run(){
				try {
				  System.out.println ("Sender started");
				  for (int i = 0; i < messages.length; i++) {
				    Thread.sleep (1000);
				    final String msg = messages[i];
				    q.put (new Runnable(){
				    	public void run(){
					    	System.out.println(msg);
				    	}
				    });
				  }
				} catch (InterruptedException e) {
				  // ignore interruptions
				}
		  	}
	  	};
	  	new Thread (Sender).start();
	  	while (true){
	  		q.take().run();
	  	}
  	} catch (InterruptedException e) {
  		  		// ignore
  	}
}
}
```

#### 8.2 examine Threads2 classes (via Javap)

```Java
C:\School\Notes\CSC347\closures\target\scala-2.10\classes>javap Threads1.class
Compiled from "Threads1.java"
public class Threads1 {
  public Threads1();
  public static void main(java.lang.String[]);
}

C:\School\Notes\CSC347\closures\target\scala-2.10\classes>javap Threads2$1.class
Compiled from "Threads2.java"
final class Threads2$1 implements java.lang.Runnable {
  final java.lang.String[] val$messages;
  final java.util.concurrent.BlockingQueue val$q;
  Threads2$1(java.lang.String[], java.util.concurrent.BlockingQueue);
  public void run();
}

C:\School\Notes\CSC347\closures\target\scala-2.10\classes>javap Threads2$1$1.class
Compiled from "Threads2.java"
class Threads2$1$1 implements java.lang.Runnable {
  final java.lang.String val$msg;
  final Threads2$1 this$0;
  Threads2$1$1(Threads2$1, java.lang.String);
  public void run();
}
```

#### Java collections processing - Q:

Then change the code so that it prints N x characters for each number N in the list. You should define a method that takes an Integer (or int) N and returns a String consisting of N x characters. You can then call that method from apply. You will need to update the type parameters to Function.

```Java
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Nested {
  public static void main (String[] args) {
    List<Integer> l = new ArrayList<> ();
    l.add(1);
    l.add(2);
    l.add(3);
    Function<Integer, Integer> () f;
    f = new Function<Integer, Integer> () {
      public Integer apply (Integer x ) { return x + 1; }
    };
    l.stream ().map (f).collect(Collectors.toList())
     .forEach(x -> System.out.println(x));
  }
}
```

#### Java Collections processing - A:

```Java
import java.util.*;
import java.util.function.Function;
import java.util.stream.Collectors;

public class Nested {
  public static void main (String[] args) {
    List<Integer> l = new ArrayList<> ();
    l.add(1);
    l.add(2);
    l.add(3);
    Function<Integer, String> rep;
    rep = new Function<Integer, String> (){
      public String apply (Integer x) {
        final String s = new String(new char[x]).replace('\0', "x".charAt(0));
        return s;
      }
    };
    Function<Integer, Integer> f;
    f = new Function<Integer, Integer> () {
      public Integer apply (Integer x ) { return x + 1; }
    };
    l.stream ().map (rep).collect(Collectors.toList())
     .forEach(x -> System.out.println(x));
  }
}
```

#### Scala Nested Classes - Q:

Scala allows class declarations and object declarations. Classes, objects, and functions/methods can be nested arbitrarily.

Object declarations can be thought of as defining a new class and instantiating just one copy if (cf. the Singleton Pattern described in SE350/SE450). There are no static methods or classes.

Save the following as O.scala in the same directory as SHello.scala and compile it with SBT.


```Scala
/*start 0.Scala*/
import scala.language.existentials

object O {
  def main (args:Array[String]) {
    class C (x:Int) {
      println ("C")
      object P {
        println ("P")
        def f () { println (args (x)) }
      }
    }
    val cs:List[C] = for (i <- (0 to (args.length - 1)).toList) yield new C (i)
    val ps:List[c.P.type forSome { val c:C }] = for (c <- cs) yield c.P
    ps.foreach (p => p.f)
  }
}
/*end 0.Scala*/
```

#### Scala Nested Classes - A:

```
/* OUTPUT: */
[info] Running N the rain in spain
C
C
C
C
P
P
P
P
the
rain
in
spain
```

#### Nested Functions - Q:

Which of the nested functions can run when the enclosing function (foo1, …, foo6) has returned?

```Scala
object NestedFunc {
  def foo1 [X] (xs:List[X]) : List[X] = {
    def aux (us:List[X], vs:List[X]) : List[X] = {
      us match {
        case Nil => vs
        case w::ws => aux (ws, w::vs)
      }
    }
    aux (xs, Nil)
  }

  def foo2 [X] (xs:List[X], k:X=>X) : List[X] = {
    def aux (us:List[X], vs:List[X]) : List[X] = {
      us match {
        case Nil => vs
        case w::ws => aux (ws, (k (w)) :: vs)
      }
    }
    aux (xs, Nil)
  }

  def foo3 [X] (xs:List[X]) : Int=>List[X] = {
    def aux (n:Int) : List[X] = {
      if (n <= 0) {
        Nil
      } else {
        xs ::: aux (n - 1)
      }
    }
    aux
  }

  def foo4 [X] (xs:List[X]) : Unit = {
    xs.foreach ((x:X) => println (x))
  }

  def foo5 (xs:List[Int]) : Int = {
    xs.foldLeft (0) ((x:Int,y:Int) => x + y)
  }

  def foo6 (xs:List[Int]) : Int=>Int = {
    (n:Int) => (xs.foldLeft (0) ((x:Int,y:Int) => x + y))
  }
}
```

#### Nested Functions - A:

* foo6 returns a function that can be called even after the lifetime of foo6 has ended
